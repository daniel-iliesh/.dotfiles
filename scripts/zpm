#!/bin/zsh
set -e

# Directories
# Use :- for default value assignment in Zsh (handles empty ZSH_CUSTOM too)
ZSH_CUSTOM="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"
CUSTOM_PLUGIN_DIR="$ZSH_CUSTOM/plugins"
BUILTIN_PLUGIN_DIR="$HOME/.oh-my-zsh/plugins" # Assuming Oh My Zsh structure
ZSHRC="$HOME/.zshrc"

# Function to show usage instructions
usage() {
    cat <<EOF
Usage: $0 {list|install|remove|enable|disable} [arguments...]

Commands:
  list [--all|-a]
      By default, lists:
         - All custom plugins (regardless of enabled/disabled)
         - Only enabled builtin plugins (from $BUILTIN_PLUGIN_DIR)
      Use --all or -a to list all plugins (builtin and custom) with their status.

  install <repo> [--no-enable]
      Installs a custom plugin. <repo> can be:
         - A full GitHub URL (with or without .git), e.g.,
             https://github.com/zsh-users/zsh-syntax-highlighting.git
         - A shorthand "username/repo", e.g.,
             zsh-users/zsh-syntax-highlighting
      By default, the plugin is added to your plugins list in $ZSHRC.
      Use --no-enable to skip auto‑enabling.
      Note: Built‑in plugins (in $BUILTIN_PLUGIN_DIR) cannot be installed.

  remove <plugin-name>
      Removes a custom plugin by deleting its folder from $CUSTOM_PLUGIN_DIR and
      removing its name from the plugins list in $ZSHRC.
      Note: Built‑in plugins in $BUILTIN_PLUGIN_DIR cannot be removed.

  enable <plugin-name>
      Adds the specified plugin to the plugins list in $ZSHRC (if available).

  disable <plugin-name>
      Removes the specified plugin from the plugins list in $ZSHRC.
EOF
    exit 1
}

# Function to extract the enabled plugins from .zshrc
get_enabled_plugins_string() {
    local enabled_line
    # Ensure ZSHRC exists and plugins line is found
    if [[ ! -f "$ZSHRC" ]] || ! enabled_line=$(grep '^plugins=' "$ZSHRC" | head -n 1); then
        echo "" # Return empty string if not found
        return
    fi
    echo "$enabled_line" | sed -E 's/^plugins=\((.*)\)/\1/'
}

# Function to print a plugin's info
print_plugin() {
    local plugin="$1"
    local type="$2"    # builtin or custom
    local status="$3"  # enabled or disabled
    printf "%-30s %-10s %s\n" "$plugin" "($type)" "$status"
}

# Function to list plugins.
list_plugins() {
    local show_all=false
    if [[ "$1" == "--all" || "$1" == "-a" ]]; then
        show_all=true
    fi

    local enabled_plugins_str
    enabled_plugins_str=$(get_enabled_plugins_string)
    # Zsh way to split string into array by spaces
    local -a enabled_array=("${(@s: :)enabled_plugins_str}")

    echo "Available Oh My Zsh plugins:"
    echo "-----------------------------------------------"

    # List builtin plugins
    if [[ -d "$BUILTIN_PLUGIN_DIR" ]]; then
        # Using Zsh globbing (N for nullglob, :t for tail/basename)
        for plugin_path in $BUILTIN_PLUGIN_DIR/*(N); do
            local plugin=${plugin_path:t} # Get basename
            local status="disabled"
            for e in "${enabled_array[@]}"; do
                if [[ "$plugin" == "$e" ]]; then
                    status="enabled"
                    break
                fi
            done
            if $show_all || [[ "$status" == "enabled" ]]; then
                print_plugin "$plugin" "builtin" "$status"
            fi
        done
    fi

    # List custom plugins
    if [[ -d "$CUSTOM_PLUGIN_DIR" ]]; then
        for plugin_path in $CUSTOM_PLUGIN_DIR/*(N); do
            local plugin=${plugin_path:t}
            local status="disabled"
            for e in "${enabled_array[@]}"; do
                if [[ "$plugin" == "$e" ]]; then
                    status="enabled"
                    break
                fi
            done
            print_plugin "$plugin" "custom" "$status"
        done
    fi
}

# Function to add a plugin to the .zshrc plugins list
enable_plugin_in_zshrc() {
    local plugin="$1"
    if [[ ! -f "$ZSHRC" ]]; then
        echo "plugins=($plugin)" > "$ZSHRC" # Create if not exists
        echo "Created $ZSHRC and added plugin '$plugin'."
        return
    fi

    if ! grep -q "^plugins=" "$ZSHRC"; then
        echo "" >> "$ZSHRC" # Add a newline for separation if plugins= line is missing
        echo "plugins=($plugin)" >> "$ZSHRC"
    elif ! grep -qE "^plugins=\(.*\<${plugin}\>.*\)" "$ZSHRC"; then # Use word boundaries \< \>
        # Using .bak extension for sed -i is standard for BSD sed (macOS)
        sed -i.bak -E "s/^(plugins=\(.*)(\))$/\1 $plugin\2/" "$ZSHRC"
        rm -f "${ZSHRC}.bak" # Optionally remove backup if successful
    else
        echo "Plugin '$plugin' is already enabled in $ZSHRC."
        return
    fi
    echo "Plugin '$plugin' enabled in $ZSHRC."
}

# Function to remove a plugin from the .zshrc plugins list
# Renamed to disable_plugin_in_zshrc for clarity, as it only modifies .zshrc
disable_plugin_in_zshrc() {
    local plugin="$1"
    if [[ ! -f "$ZSHRC" ]]; then
        echo "Warning: $ZSHRC not found. Cannot disable plugin '$plugin'."
        return
    fi

    if grep -qE "^plugins=\(.*\<${plugin}\>.*\)" "$ZSHRC"; then
        # Remove the plugin, then clean up potential double spaces or leading/trailing spaces in parens
        sed -i.bak -E "s/\b${plugin}\b//g" "$ZSHRC" # Remove the plugin word
        sed -i.bak -E 's/plugins=\(\s+/plugins=(/' "$ZSHRC" # Remove leading space after (
        sed -i.bak -E 's/\s+\)/)/' "$ZSHRC" # Remove trailing space before )
        sed -i.bak -E 's/\s\s+/ /g' "$ZSHRC" # Compact multiple spaces
        rm -f "${ZSHRC}.bak" # Optionally remove backup
        echo "Plugin '$plugin' disabled in $ZSHRC."
    else
        echo "Plugin '$plugin' not found in $ZSHRC plugins list."
    fi
}

# Function to install a plugin (only custom)
install_plugin() {
    local repo="$1"
    shift # Consume the repo argument
    local enable_plugin_flag=true # Renamed to avoid conflict with function name

    # Process optional arguments
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --no-enable)
                enable_plugin_flag=false
                ;;
            *)
                echo "Unknown option for install: $1"
                usage
                ;;
        esac
        shift
    done

    if [[ "$repo" != http* && "$repo" == */* ]]; then # Basic check for shorthand
        repo="https://github.com/$repo.git"
    elif [[ "$repo" == http* && "$repo" != *.git ]]; then
        repo="${repo}.git"
    elif [[ "$repo" != http* ]]; then
        echo "Error: Invalid repository format. Use 'username/repo' or full URL."
        exit 1
    fi

    local plugin_name
    plugin_name=$(basename "$repo" .git) # Simpler basename usage

    if [[ -d "$BUILTIN_PLUGIN_DIR/$plugin_name" ]]; then
        echo "Error: Plugin '$plugin_name' exists as a built‑in plugin. No need to install it."
        exit 1
    fi

    mkdir -p "$CUSTOM_PLUGIN_DIR"

    if [[ -d "$CUSTOM_PLUGIN_DIR/$plugin_name" ]]; then
        echo "Plugin '$plugin_name' is already installed in $CUSTOM_PLUGIN_DIR."
    else
        echo "Cloning $repo into $CUSTOM_PLUGIN_DIR/$plugin_name..."
        if git clone --depth 1 "$repo" "$CUSTOM_PLUGIN_DIR/$plugin_name"; then
            echo "Plugin '$plugin_name' installed successfully."
        else
            echo "Error: Failed to clone plugin '$plugin_name'."
            exit 1
        fi
    fi

    if $enable_plugin_flag; then
        enable_plugin_in_zshrc "$plugin_name"
    else
        echo "Skipping enabling plugin '$plugin_name' in $ZSHRC as requested."
    fi
}

# Function to remove a custom plugin
remove_plugin() {
    local plugin="$1"
    if [[ -z "$plugin" ]]; then
        echo "Please specify the plugin name to remove."
        usage
    fi

    if [[ -d "$BUILTIN_PLUGIN_DIR/$plugin" ]]; then
        echo "Error: '$plugin' is a built‑in plugin and cannot be removed using this script."
        exit 1
    fi

    local plugin_path="$CUSTOM_PLUGIN_DIR/$plugin"
    if [[ -d "$plugin_path" ]]; then
        read -q "choice?Are you sure you want to remove the plugin '$plugin' from $plugin_path? (y/N): "
        echo # Newline after read -q
        if [[ "$choice" =~ ^[Yy]$ ]]; then
            if rm -rf "$plugin_path"; then
                echo "Plugin '$plugin' removed from $CUSTOM_PLUGIN_DIR."
                disable_plugin_in_zshrc "$plugin" # Call the renamed function
            else
                echo "Error: Failed to remove plugin directory $plugin_path."
            fi
        else
            echo "Removal of plugin '$plugin' cancelled."
        fi
    else
        echo "Plugin '$plugin' not found in $CUSTOM_PLUGIN_DIR."
    fi
}

# Main script logic
if [[ "$#" -lt 1 ]]; then
    usage
fi

command="$1"
shift # Consume the command

case "$command" in
    list)
        list_plugins "$@" # Pass remaining args (e.g., --all)
        ;;
    install)
        if [[ "$#" -lt 1 ]]; then usage; fi
        install_plugin "$@"
        ;;
    remove)
        if [[ "$#" -lt 1 ]]; then usage; fi
        remove_plugin "$1"
        ;;
    enable)
        if [[ "$#" -lt 1 ]]; then usage; fi
        enable_plugin_in_zshrc "$1"
        ;;
    disable)
        if [[ "$#" -lt 1 ]]; then usage; fi
        disable_plugin_in_zshrc "$1" # Call the renamed function
        ;;
    *)
        usage
        ;;
esac
